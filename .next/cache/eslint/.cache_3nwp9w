[{"H:\\node\\pos\\pages\\api\\auth\\login.js":"1","H:\\node\\pos\\pages\\api\\auth\\logout.js":"2","H:\\node\\pos\\pages\\category\\create.js":"3","H:\\node\\pos\\pages\\category\\index.js":"4","H:\\node\\pos\\pages\\category\\[id].js":"5","H:\\node\\pos\\pages\\customer\\create.js":"6","H:\\node\\pos\\pages\\customer\\index.js":"7","H:\\node\\pos\\pages\\customer\\[id].js":"8","H:\\node\\pos\\pages\\dashboard.js":"9","H:\\node\\pos\\pages\\index.js":"10","H:\\node\\pos\\pages\\product\\create.js":"11","H:\\node\\pos\\pages\\product\\index.js":"12","H:\\node\\pos\\pages\\product\\[id].js":"13","H:\\node\\pos\\pages\\purchase\\create.js":"14","H:\\node\\pos\\pages\\purchase\\index.js":"15","H:\\node\\pos\\pages\\purchase\\view\\[id].js":"16","H:\\node\\pos\\pages\\purchase\\[id].js":"17","H:\\node\\pos\\pages\\sale\\create.js":"18","H:\\node\\pos\\pages\\sale\\index.js":"19","H:\\node\\pos\\pages\\sale\\view\\[id].js":"20","H:\\node\\pos\\pages\\sale\\[id].js":"21","H:\\node\\pos\\pages\\supplier\\create.js":"22","H:\\node\\pos\\pages\\supplier\\index.js":"23","H:\\node\\pos\\pages\\supplier\\[id].js":"24","H:\\node\\pos\\pages\\unit\\create.js":"25","H:\\node\\pos\\pages\\unit\\index.js":"26","H:\\node\\pos\\pages\\unit\\[id].js":"27","H:\\node\\pos\\pages\\_app.js":"28","H:\\node\\pos\\components\\AutocompleteDefaultSupplier.js":"29","H:\\node\\pos\\components\\AutocompleteInput.js":"30","H:\\node\\pos\\components\\CustomImage.js":"31","H:\\node\\pos\\components\\layout\\Layout.js":"32","H:\\node\\pos\\components\\layout\\PosSidebar.js":"33","H:\\node\\pos\\components\\layout\\PosTopBar.js":"34","H:\\node\\pos\\components\\layout\\Sidebar.js":"35","H:\\node\\pos\\components\\layout\\TopBar.js":"36","H:\\node\\pos\\components\\Loader.js":"37","H:\\node\\pos\\components\\TableSkeleton.js":"38","H:\\node\\pos\\lib\\db.js":"39","H:\\node\\pos\\lib\\session.js":"40"},{"size":393,"mtime":1656082789798,"results":"41","hashOfConfig":"42"},{"size":288,"mtime":1649611496037,"results":"43","hashOfConfig":"42"},{"size":4275,"mtime":1658743446096,"results":"44","hashOfConfig":"42"},{"size":10278,"mtime":1656092758979,"results":"45","hashOfConfig":"42"},{"size":5468,"mtime":1658743674875,"results":"46","hashOfConfig":"42"},{"size":5352,"mtime":1658741051926,"results":"47","hashOfConfig":"42"},{"size":10803,"mtime":1659611502488,"results":"48","hashOfConfig":"42"},{"size":7326,"mtime":1658741331018,"results":"49","hashOfConfig":"42"},{"size":907,"mtime":1659607847039,"results":"50","hashOfConfig":"42"},{"size":5689,"mtime":1656084158176,"results":"51","hashOfConfig":"42"},{"size":8606,"mtime":1660391753964,"results":"52","hashOfConfig":"42"},{"size":10466,"mtime":1658809125404,"results":"53","hashOfConfig":"42"},{"size":13033,"mtime":1660392150062,"results":"54","hashOfConfig":"42"},{"size":16307,"mtime":1658908725530,"results":"55","hashOfConfig":"42"},{"size":11382,"mtime":1658920426299,"results":"56","hashOfConfig":"42"},{"size":7640,"mtime":1658822686226,"results":"57","hashOfConfig":"42"},{"size":21651,"mtime":1658919577280,"results":"58","hashOfConfig":"42"},{"size":24155,"mtime":1660388686659,"results":"59","hashOfConfig":"42"},{"size":11382,"mtime":1658920426298,"results":"60","hashOfConfig":"42"},{"size":7640,"mtime":1658822686225,"results":"61","hashOfConfig":"42"},{"size":21651,"mtime":1658919577280,"results":"62","hashOfConfig":"42"},{"size":5394,"mtime":1658743171745,"results":"63","hashOfConfig":"42"},{"size":10804,"mtime":1658920144730,"results":"64","hashOfConfig":"42"},{"size":7291,"mtime":1658811901552,"results":"65","hashOfConfig":"42"},{"size":4255,"mtime":1658743674865,"results":"66","hashOfConfig":"42"},{"size":10152,"mtime":1656142706551,"results":"67","hashOfConfig":"42"},{"size":5392,"mtime":1658743674848,"results":"68","hashOfConfig":"42"},{"size":327,"mtime":1650193836779,"results":"69","hashOfConfig":"42"},{"size":2213,"mtime":1658824485360,"results":"70","hashOfConfig":"42"},{"size":3431,"mtime":1659178108464,"results":"71","hashOfConfig":"42"},{"size":756,"mtime":1649671099814,"results":"72","hashOfConfig":"42"},{"size":2675,"mtime":1659418814081,"results":"73","hashOfConfig":"42"},{"size":10752,"mtime":1658989241264,"results":"74","hashOfConfig":"42"},{"size":308,"mtime":1658946591851,"results":"75","hashOfConfig":"42"},{"size":12126,"mtime":1658988622276,"results":"76","hashOfConfig":"42"},{"size":302,"mtime":1649856574162,"results":"77","hashOfConfig":"42"},{"size":98,"mtime":1658740767804,"results":"78","hashOfConfig":"42"},{"size":846,"mtime":1656187048283,"results":"79","hashOfConfig":"42"},{"size":625,"mtime":1650130640300,"results":"80","hashOfConfig":"42"},{"size":192,"mtime":1658926058875,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2jvera",{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"H:\\node\\pos\\pages\\api\\auth\\login.js",[],[],"H:\\node\\pos\\pages\\api\\auth\\logout.js",[],[],"H:\\node\\pos\\pages\\category\\create.js",[],[],"H:\\node\\pos\\pages\\category\\index.js",["213"],[],"import Layout from \"../../components/layout/Layout\";\r\nimport Head from \"next/head\";\r\nimport {withIronSessionSsr} from 'iron-session/next';\r\nimport session from \"../../lib/session\";\r\nimport Link from \"next/link\";\r\nimport {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport TableSkeleton from \"../../components/TableSkeleton\";\r\nimport $ from 'jquery';\r\nimport {ToastContainer, toast} from 'react-toastify';\r\n\r\nexport default function Category({user}) {\r\n    const headers = {\r\n        headers: {Authorization: `Bearer ${user.token}`},\r\n    };\r\n    const [categories, setCategories] = useState();\r\n    const [links, setLinks] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [timer, setTimer] = useState(null);\r\n    useEffect(() => {\r\n        axios.get(\r\n            `${process.env.API_URL}/category`,\r\n            headers\r\n        ).then(res => {\r\n            if (res.data.status === true) {\r\n                setCategories(res.data.categories.data);\r\n                setLinks(res.data.categories.links);\r\n                setLoading(false);\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }, []);\r\n    const searchCategory = async () => {\r\n        if (timer) {\r\n            clearTimeout(timer);\r\n            setTimer(null);\r\n        }\r\n        setTimer(\r\n            setTimeout(() => {\r\n                setLoading(true);\r\n                const name = $('.terms').val();\r\n                axios.get(\r\n                    `${process.env.API_URL}/category?name=${name}`,\r\n                    headers\r\n                ).then(res => {\r\n                    if (res.data.status === true) {\r\n                        setCategories(res.data.categories.data);\r\n                        setLinks(res.data.categories.links);\r\n                        setLoading(false);\r\n                    }\r\n                }).catch(err => {\r\n                    console.log(err);\r\n                });\r\n            }, 2000)\r\n        );\r\n    }\r\n    const paginate = async (url) => {\r\n        setLoading(true);\r\n        try {\r\n            const res = await axios.get(\r\n                url,\r\n                headers\r\n            );\r\n            if (res.data.status === true) {\r\n                setCategories(res.data.categories.data);\r\n                setLinks(res.data.categories.links);\r\n                setLoading(false);\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n    const deleteHandler = async (id) => {\r\n        toast.loading('Deleting', {\r\n            position: \"bottom-right\",\r\n            theme: 'dark'\r\n        });\r\n        try {\r\n            const response = await axios.post(`${process.env.API_URL}/category/delete`, {\r\n                id: id,\r\n            }, headers);\r\n            console.log(response.data);\r\n            if (response.data.status === true) {\r\n                toast.dismiss();\r\n                toast.success('Successfully Deleted', {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                $(`.row-id-${id}`).fadeOut();\r\n            }else {\r\n                toast.dismiss();\r\n                toast.error(response.data.error, {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n            }\r\n        } catch (err) {\r\n            toast.dismiss();\r\n            toast.error(err.response.data.errors, {\r\n                position: \"bottom-right\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: 'dark',\r\n            });\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>\r\n                    Categories\r\n                </title>\r\n            </Head>\r\n            <ToastContainer/>\r\n            <Layout user={user} title={`Category`}>\r\n                <div className=\"content\">\r\n                    <div className=\"custom-card\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-9\">\r\n                                <Link href={`/category/create`}>\r\n                                    <a className={`btn btn-success`}>\r\n                                        <i className=\"fa-solid fa-plus\"/> Add New Category\r\n                                    </a>\r\n                                </Link>\r\n                            </div>\r\n                            <div className=\"col-md-3\">\r\n                                <form>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col\">\r\n                                            <input type=\"text\" className=\"form-control terms\"\r\n                                                   placeholder={`Search category`}\r\n                                                   name=\"email\" onKeyUp={searchCategory} onKeyDown={searchCategory}\r\n                                                   onChange={searchCategory}/>\r\n                                        </div>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                        <table className={`table mt-4`}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th width={`10%`}>Sl</th>\r\n                                <th width={`80%`}>Name</th>\r\n                                <th width={`10%`}>Action</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {\r\n                                categories && categories.length <= 0 && (\r\n                                    <tr>\r\n                                        <td colSpan={3} className={`text-center`}>No Category Found</td>\r\n                                    </tr>\r\n                                )\r\n                            }\r\n                            {categories && !loading && (\r\n                                categories.map((el, index) => (\r\n                                    <tr key={el.id} valign={`middle`} className={`row-id-${el.id}`}>\r\n                                        <td>{index + 1}</td>\r\n                                        <td>{el.name}</td>\r\n                                        <td>\r\n                                            <Link href={`/category/${el.id}`}>\r\n                                                <a className={`btn btn-warning btn-sm me-2`}>\r\n                                                    <i className=\"fa-solid fa-pen-to-square\"/>\r\n                                                </a>\r\n                                            </Link>\r\n                                            <a className={`btn btn-danger btn-sm`} onClick={(e) => {\r\n                                                e.preventDefault();\r\n                                                const result =\r\n                                                    confirm(\r\n                                                        'Want to delete?'\r\n                                                    );\r\n                                                if (result) {\r\n                                                    deleteHandler(\r\n                                                        el.id\r\n                                                    );\r\n                                                }\r\n                                            }}>\r\n                                                <i className=\"fa-solid fa-trash-can\"/>\r\n                                            </a>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            ) || (\r\n                                <TableSkeleton tr={3} td={3}/>\r\n                            )}\r\n\r\n                            </tbody>\r\n                            <tfoot>\r\n                            <tr>\r\n                                <td colSpan={3}>\r\n                                    <nav className={`float-end`}>\r\n                                        <ul className=\"pagination mt-3\">\r\n                                            {\r\n                                                links.map(el => (\r\n                                                    <li className={`page-item ${el.active === true ? 'active' : ''}`}\r\n                                                        key={el.label}>\r\n                                                        <a className={`page-link`}\r\n                                                           onClick={() => paginate(el.url)}\r\n                                                           dangerouslySetInnerHTML={{__html: el.label}}/>\r\n                                                    </li>\r\n                                                ))\r\n                                            }\r\n                                        </ul>\r\n                                    </nav>\r\n                                </td>\r\n                            </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </Layout>\r\n        </>\r\n    )\r\n}\r\nexport const getServerSideProps = withIronSessionSsr(\r\n    async function getServerSideProps({req}) {\r\n        const session = req.session;\r\n        if (!session.user) {\r\n            return {\r\n                redirect: {\r\n                    destination: `/`,\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            props: {\r\n                user: session.user\r\n            },\r\n        };\r\n    },\r\n    session\r\n);","H:\\node\\pos\\pages\\category\\[id].js",["214"],[],"import Layout from \"../../components/layout/Layout\";\r\nimport Head from \"next/head\";\r\nimport {withIronSessionSsr} from 'iron-session/next';\r\nimport session from \"../../lib/session\";\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport axios from \"axios\";\r\nimport $ from 'jquery';\r\nimport {useEffect, useState} from \"react\";\r\nimport Skeleton, {SkeletonTheme} from 'react-loading-skeleton';\r\nimport Loader from \"../../components/Loader\";\r\n\r\nexport default function EditCategory({user, id}) {\r\n    const [loader, setLoader] = useState(false);\r\n    const [category, setCategory] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n    const headers = {\r\n        headers: {Authorization: `Bearer ${user.token}`},\r\n    };\r\n    useEffect(() => {\r\n        axios.get(\r\n            `${process.env.API_URL}/category/${id}`,\r\n            headers\r\n        ).then(res => {\r\n            console.log(res.data);\r\n            if (res.data.status === true) {\r\n                setCategory(res.data.category);\r\n                setLoading(false);\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }, []);\r\n    const handleForm = async (e) => {\r\n        e.preventDefault();\r\n        toast.loading('Submitting', {\r\n            position: \"bottom-right\",\r\n            theme: 'dark'\r\n        });\r\n        setLoader(true);\r\n        const name = $('.name').val();\r\n        if (name === ''){\r\n            toast.dismiss();\r\n            toast.error('Name is required', {\r\n                position: \"bottom-left\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: 'dark',\r\n            });\r\n            setLoader(false);\r\n            return;\r\n        }\r\n        try {\r\n            const res = await axios.post(`${process.env.API_URL}/category/update`, {\r\n                name, id\r\n            },headers);\r\n            if (res.data.status === true) {\r\n                toast.dismiss();\r\n                toast.success('Successfully Updated', {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                setLoader(false);\r\n            }else {\r\n                toast.dismiss();\r\n                toast.error(res.data.errors, {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                setLoader(false);\r\n            }\r\n        } catch (e) {\r\n            toast.dismiss();\r\n            toast.error(e.response.data.errors, {\r\n                position: \"bottom-right\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: 'dark',\r\n            });\r\n            setLoader(false);\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>\r\n                    Edit Category\r\n                </title>\r\n            </Head>\r\n            {\r\n                loader && loader === true && (\r\n                    <Loader/>\r\n                )\r\n            }\r\n            <ToastContainer/>\r\n            <Layout user={user} title={`Edit Category`}>\r\n                <div className=\"content\">\r\n                    <div className=\"custom-card\">\r\n                        <form onSubmit={handleForm}>\r\n                            <div className=\"mb-3\">\r\n                                <label htmlFor=\"name\" className={`form-label`}>Category Name</label>\r\n                                {\r\n                                    category && loading === false && (\r\n                                        <input type=\"text\" className={`form-control name`} id={`name`} required\r\n                                               defaultValue={category.name}/>\r\n                                    ) || (\r\n                                        <SkeletonTheme baseColor=\"rgba(249, 58, 11, 0.1)\" highlightColor=\"#212130\">\r\n                                            <Skeleton width={`100%`} height={40}/>\r\n                                        </SkeletonTheme>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <button className={`btn btn-success`} type={`submit`}>Update</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </Layout>\r\n        </>\r\n    )\r\n}\r\nexport const getServerSideProps = withIronSessionSsr(\r\n    async function getServerSideProps({req, params}) {\r\n        const session = req.session;\r\n        const id = params.id;\r\n        if (!session.user) {\r\n            return {\r\n                redirect: {\r\n                    destination: `/`,\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            props: {\r\n                user: session.user,\r\n                id\r\n            },\r\n        };\r\n    },\r\n    session\r\n);","H:\\node\\pos\\pages\\customer\\create.js",[],[],"H:\\node\\pos\\pages\\customer\\index.js",["215"],[],"H:\\node\\pos\\pages\\customer\\[id].js",["216"],[],"import Layout from \"../../components/layout/Layout\";\r\nimport Head from \"next/head\";\r\nimport {withIronSessionSsr} from 'iron-session/next';\r\nimport session from \"../../lib/session\";\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport axios from \"axios\";\r\nimport $ from 'jquery';\r\nimport {useEffect, useState} from \"react\";\r\nimport Skeleton, {SkeletonTheme} from \"react-loading-skeleton\";\r\nimport Loader from \"../../components/Loader\";\r\n\r\nexport default function EditCustomer({user, id}) {\r\n    const [customer, setCustomer] = useState();\r\n    const [loader, setLoader] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n    const headers = {\r\n        headers: {Authorization: `Bearer ${user.token}`},\r\n    };\r\n    useEffect(() => {\r\n        axios.get(\r\n            `${process.env.API_URL}/customer/${id}`,\r\n            headers\r\n        ).then(res => {\r\n            console.log(res.data);\r\n            if (res.data.status === true) {\r\n                setCustomer(res.data.customer);\r\n                setLoading(false);\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }, []);\r\n    const handleForm = async (e) => {\r\n        e.preventDefault();\r\n        toast.loading('Submitting', {\r\n            position: \"bottom-right\",\r\n            theme: 'dark'\r\n        });\r\n        setLoader(true);\r\n        const name = $('.name').val();\r\n        const mobile = $('.mobile').val();\r\n        const address = $('.address').val();\r\n        if (name === '') {\r\n            toast.dismiss();\r\n            toast.error('Name is required', {\r\n                position: \"bottom-left\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: 'dark',\r\n            });\r\n            setLoader(false);\r\n            return;\r\n        }\r\n        try {\r\n            const res = await axios.post(`${process.env.API_URL}/customer/update`, {\r\n                name, mobile, address, id: id\r\n            }, headers);\r\n            if (res.data.status === true) {\r\n                toast.dismiss();\r\n                toast.success('Successfully Updated', {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                setLoader(false);\r\n            } else {\r\n                toast.dismiss();\r\n                toast.error(e.response.data.errors, {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 3000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                setLoader(false);\r\n            }\r\n        } catch (e) {\r\n            toast.dismiss();\r\n            toast.error(e.response.data, {\r\n                position: \"bottom-right\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: 'dark',\r\n            });\r\n            setLoader(false);\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>\r\n                    Edit Customer\r\n                </title>\r\n            </Head>\r\n            <ToastContainer/>\r\n            {\r\n                loader && loader === true && (\r\n                    <Loader/>\r\n                )\r\n            }\r\n            <Layout user={user} title={`Edit Customer`}>\r\n                <div className=\"content\">\r\n                    <div className=\"custom-card\">\r\n                        <form onSubmit={handleForm}>\r\n                            <div className=\"mb-3\">\r\n                                <label htmlFor=\"name\" className={`form-label`}>Customer Name</label>\r\n                                {\r\n                                    customer && loading === false && (\r\n                                        <input type=\"text\" className={`form-control name`} id={`name`} required\r\n                                               defaultValue={customer.name}/>\r\n                                    ) || (\r\n                                        <SkeletonTheme baseColor=\"rgba(249, 58, 11, 0.1)\" highlightColor=\"#212130\">\r\n                                            <Skeleton width={`100%`} height={40}/>\r\n                                        </SkeletonTheme>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <div className=\"mb-3\">\r\n                                <label htmlFor=\"mobile\" className={`form-label`}>Customer Mobile</label>\r\n\r\n                                {\r\n                                    customer && loading === false && (\r\n                                        <input type=\"text\" className={`form-control mobile`} id={`mobile`}\r\n                                               defaultValue={customer.mobile}/>\r\n                                    ) || (\r\n                                        <SkeletonTheme baseColor=\"rgba(249, 58, 11, 0.1)\" highlightColor=\"#212130\">\r\n                                            <Skeleton width={`100%`} height={40}/>\r\n                                        </SkeletonTheme>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <div className=\"mb-3\">\r\n                                <label htmlFor=\"address\" className={`form-label`}>Customer Address</label>\r\n\r\n                                {\r\n                                    customer && loading === false && (\r\n                                        <input type=\"text\" className={`form-control address`} id={`address`}\r\n                                               defaultValue={customer.address}/>\r\n                                    ) || (\r\n                                        <SkeletonTheme baseColor=\"rgba(249, 58, 11, 0.1)\" highlightColor=\"#212130\">\r\n                                            <Skeleton width={`100%`} height={40}/>\r\n                                        </SkeletonTheme>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <button className={`btn btn-success`} type={`submit`}>Update</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </Layout>\r\n        </>\r\n    )\r\n}\r\nexport const getServerSideProps = withIronSessionSsr(\r\n    async function getServerSideProps({req, params}) {\r\n        const session = req.session;\r\n        const id = params.id;\r\n        if (!session.user) {\r\n            return {\r\n                redirect: {\r\n                    destination: `/`,\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            props: {\r\n                user: session.user,\r\n                id,\r\n            },\r\n        };\r\n    },\r\n    session\r\n);","H:\\node\\pos\\pages\\dashboard.js",[],[],"H:\\node\\pos\\pages\\index.js",[],[],"H:\\node\\pos\\pages\\product\\create.js",["217"],[],"H:\\node\\pos\\pages\\product\\index.js",["218"],[],"import Layout from \"../../components/layout/Layout\";\r\nimport Head from \"next/head\";\r\nimport {withIronSessionSsr} from 'iron-session/next';\r\nimport session from \"../../lib/session\";\r\nimport Link from \"next/link\";\r\nimport {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport TableSkeleton from \"../../components/TableSkeleton\";\r\nimport $ from 'jquery';\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nexport default function Product({user}) {\r\n    const headers = {\r\n        headers: {Authorization: `Bearer ${user.token}`},\r\n    };\r\n    const [products, setProducts] = useState();\r\n    const [links, setLinks] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [timer, setTimer] = useState(null);\r\n    useEffect(() => {\r\n        axios.get(\r\n            `${process.env.API_URL}/product`,\r\n            headers\r\n        ).then(res => {\r\n            if (res.data.status === true) {\r\n                setProducts(res.data.products.data);\r\n                setLinks(res.data.products.links);\r\n                setLoading(false);\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }, []);\r\n\r\n    const searchProduct = async () => {\r\n        if (timer) {\r\n            clearTimeout(timer);\r\n            setTimer(null);\r\n        }\r\n        setTimer(\r\n            setTimeout(() => {\r\n                setLoading(true);\r\n                const name = $('.terms').val();\r\n                axios.get(\r\n                    `${process.env.API_URL}/product?name=${name}`,\r\n                    headers\r\n                ).then(res => {\r\n                    if (res.data.status === true) {\r\n                        setProducts(res.data.products.data);\r\n                        setLinks(res.data.products.links);\r\n                        setLoading(false);\r\n                    }\r\n                }).catch(err => {\r\n                    console.log(err);\r\n                });\r\n            }, 2000)\r\n        );\r\n    }\r\n    const paginate = async (url) => {\r\n        setLoading(true);\r\n        try {\r\n            const res = await axios.get(\r\n                url,\r\n                headers\r\n            );\r\n            if (res.data.status === true) {\r\n                setProducts(res.data.products.data);\r\n                setLinks(res.data.products.links);\r\n                setLoading(false);\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n    const deleteHandler = async (id) => {\r\n        toast.loading('Deleting', {\r\n            position: \"bottom-right\",\r\n            theme: 'dark'\r\n        });\r\n        try {\r\n            const response = await axios.post(`${process.env.API_URL}/product/delete`, {\r\n                id: id,\r\n            }, headers);\r\n            if (response.data.status === true) {\r\n                toast.dismiss();\r\n                toast.success('Successfully Deleted', {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                $(`.row-id-${id}`).fadeOut();\r\n            }else {\r\n                toast.dismiss();\r\n                toast.error(response.data.error, {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n            }\r\n        } catch (err) {\r\n            toast.dismiss();\r\n            toast.error(err.response.data.errors, {\r\n                position: \"bottom-right\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: 'dark',\r\n            });\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>\r\n                    Products\r\n                </title>\r\n            </Head>\r\n            <ToastContainer/>\r\n            <Layout user={user} title={`Products`}>\r\n                <div className=\"content\">\r\n                    <div className=\"custom-card\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-9\">\r\n                                <Link href={`/product/create`}>\r\n                                    <a className={`btn btn-success`}>\r\n                                        <i className=\"fa-solid fa-plus\"/> Add New Product\r\n                                    </a>\r\n                                </Link>\r\n                            </div>\r\n                            <div className=\"col-md-3\">\r\n                                <form>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col\">\r\n                                            <input type=\"text\" className=\"form-control terms\"\r\n                                                   placeholder={`Search product`}\r\n                                                   name=\"email\" onKeyUp={searchProduct} onKeyDown={searchProduct}\r\n                                                   onChange={searchProduct}/>\r\n                                        </div>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                        <table className={`table mt-4`}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th width={`10%`}>Sl</th>\r\n                                <th width={`40%`}>Name</th>\r\n                                <th width={`20%`}>Sale Price</th>\r\n                                <th width={`20%`}>Purchase Price</th>\r\n                                <th width={`10%`}>Action</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {\r\n                                products && products.length <= 0 && (\r\n                                    <tr>\r\n                                        <td colSpan={5} className={`text-center`}>No Product Found</td>\r\n                                    </tr>\r\n                                )\r\n                            }\r\n                            {products && !loading &&(\r\n                                products.map((el, index) => (\r\n                                    <tr key={el.id} valign={`middle`} className={`row-id-${el.id}`}>\r\n                                        <td>{index + 1}</td>\r\n                                        <td>{el.name}</td>\r\n                                        <td>{el.price} Tk.</td>\r\n                                        <td>{el.purchase_price} Tk.</td>\r\n                                        <td>\r\n                                            <Link href={`/product/${el.id}`}>\r\n                                                <a className={`btn btn-warning btn-sm me-2`}>\r\n                                                    <i className=\"fa-solid fa-pen-to-square\"/>\r\n                                                </a>\r\n                                            </Link>\r\n                                            <a className={`btn btn-danger btn-sm`} onClick={(e) => {\r\n                                                e.preventDefault();\r\n                                                const result =\r\n                                                    confirm(\r\n                                                        'Want to delete?'\r\n                                                    );\r\n                                                if (result) {\r\n                                                    deleteHandler(\r\n                                                        el.id\r\n                                                    );\r\n                                                }\r\n                                            }}>\r\n                                                <i className=\"fa-solid fa-trash-can\"/>\r\n                                            </a>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            ) || (\r\n                                <TableSkeleton tr={3} td={5}/>\r\n                            )}\r\n                            </tbody>\r\n                            <tfoot>\r\n                            <tr>\r\n                                <td colSpan={6}>\r\n                                    <nav className={`float-end`}>\r\n                                        <ul className=\"pagination mt-3\">\r\n                                            {\r\n                                                links.map(el => (\r\n                                                    <li className={`page-item ${el.active === true ? 'active' : ''}`}\r\n                                                        key={el.label}>\r\n                                                        <a className={`page-link`}\r\n                                                           onClick={() => paginate(el.url)}\r\n                                                           dangerouslySetInnerHTML={{__html: el.label}}/>\r\n                                                    </li>\r\n                                                ))\r\n                                            }\r\n                                        </ul>\r\n                                    </nav>\r\n                                </td>\r\n                            </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </Layout>\r\n        </>\r\n    )\r\n}\r\nexport const getServerSideProps = withIronSessionSsr(\r\n    async function getServerSideProps({req}) {\r\n        const session = req.session;\r\n        if (!session.user) {\r\n            return {\r\n                redirect: {\r\n                    destination: `/`,\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            props: {\r\n                user: session.user\r\n            },\r\n        };\r\n    },\r\n    session\r\n);","H:\\node\\pos\\pages\\product\\[id].js",["219","220"],[],"H:\\node\\pos\\pages\\purchase\\create.js",[],[],"H:\\node\\pos\\pages\\purchase\\index.js",["221"],[],"import Layout from \"../../components/layout/Layout\";\r\nimport Head from \"next/head\";\r\nimport {withIronSessionSsr} from 'iron-session/next';\r\nimport session from \"../../lib/session\";\r\nimport Link from \"next/link\";\r\nimport {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport TableSkeleton from \"../../components/TableSkeleton\";\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport $ from \"jquery\";\r\n\r\nexport default function Purchase({user}) {\r\n    const [purchases, setPurchases] = useState();\r\n    const [links, setLinks] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [timer, setTimer] = useState(null);\r\n    const headers = {\r\n        headers: {Authorization: `Bearer ${user.token}`},\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get(\r\n            `${process.env.API_URL}/purchase`,\r\n            headers\r\n        ).then(res => {\r\n            if (res.data.status === true) {\r\n                setPurchases(res.data.purchases.data);\r\n                setLinks(res.data.purchases.links);\r\n                setLoading(false);\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }, []);\r\n    const searchPurchase = async () => {\r\n        if (timer) {\r\n            clearTimeout(timer);\r\n            setTimer(null);\r\n        }\r\n        setTimer(\r\n            setTimeout(() => {\r\n                setLoading(true);\r\n                const name = $('.terms').val();\r\n                axios.get(\r\n                    `${process.env.API_URL}/purchase?name=${name}`,\r\n                    headers\r\n                ).then(res => {\r\n                    if (res.data.status === true) {\r\n                        setPurchases(res.data.purchases.data);\r\n                        setLinks(res.data.purchases.links);\r\n                        setLoading(false);\r\n                    }\r\n                }).catch(err => {\r\n                    console.log(err);\r\n                });\r\n            }, 2000)\r\n        );\r\n    }\r\n    const paginate = async (url) => {\r\n        setLoading(true);\r\n        try {\r\n            const res = await axios.get(\r\n                url,\r\n                headers\r\n            );\r\n            if (res.data.status === true) {\r\n                setPurchases(res.data.purchases.data);\r\n                setLinks(res.data.purchases.links);\r\n                setLoading(false);\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n    const deleteHandler = async (id) => {\r\n        toast.loading('Deleting', {\r\n            position: \"bottom-right\",\r\n            theme: 'dark'\r\n        });\r\n        try {\r\n            const response = await axios.post(`${process.env.API_URL}/purchase/delete`, {\r\n                id: id,\r\n            }, headers);\r\n            if (response.data.status === true) {\r\n                toast.dismiss();\r\n                toast.success('Successfully Deleted', {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                $(`.row-id-${id}`).fadeOut();\r\n            }else {\r\n                toast.dismiss();\r\n                toast.error(response.data.error, {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n            }\r\n        } catch (err) {\r\n            toast.dismiss();\r\n            toast.error(err.response.data.errors, {\r\n                position: \"bottom-right\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: 'dark',\r\n            });\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>\r\n                    Purchase\r\n                </title>\r\n            </Head>\r\n            <ToastContainer/>\r\n            <Layout user={user} title={`Purchase`}>\r\n                <div className=\"content\">\r\n                    <div className=\"custom-card\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-9\">\r\n                                <Link href={`/purchase/create`}>\r\n                                    <a className={`btn btn-success`}>\r\n                                        <i className=\"fa-solid fa-plus\"/> Add New Purchase\r\n                                    </a>\r\n                                </Link>\r\n                            </div>\r\n                            <div className=\"col-md-3\">\r\n                                <form>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col\">\r\n                                            <input type=\"text\" className=\"form-control terms\"\r\n                                                   placeholder={`Search`}\r\n                                                   name=\"email\" onKeyUp={searchPurchase} onKeyDown={searchPurchase}\r\n                                                   onChange={searchPurchase}/>\r\n                                        </div>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                        <table className={`table mt-4`}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th width={`10%`}>Sl</th>\r\n                                <th width={`15%`}>Purchase ID</th>\r\n                                <th width={`25%`}>Supplier Name</th>\r\n                                <th width={`15%`}>Amount</th>\r\n                                <th width={`15%`}>Note</th>\r\n                                <th width={`20%`}>Action</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {\r\n                                purchases && purchases.length <= 0 && (\r\n                                    <tr>\r\n                                        <td colSpan={6} className={`text-center`}>No Purchase Found</td>\r\n                                    </tr>\r\n                                )\r\n                            }\r\n                            {purchases && !loading &&(\r\n                                purchases.map((el, index) => (\r\n                                    <tr key={el.id} valign={`middle`} className={`row-id-${el.id}`}>\r\n                                        <td>{index + 1}</td>\r\n                                        <td className={`text-uppercase`}>{el.purchase_id}</td>\r\n                                        <td>{el.supplier_name}</td>\r\n                                        <td>{el.amount} Tk.</td>\r\n                                        <td>{el.comment}</td>\r\n                                        <td>\r\n                                            <Link href={`#`}>\r\n                                                <a className={`btn btn-success btn-sm me-2`}>\r\n                                                    <i className=\"fa-solid fa-barcode\"/>\r\n                                                </a>\r\n                                            </Link>\r\n                                            <Link href={`/purchase/view/${el.id}`}>\r\n                                                <a className={`btn btn-success btn-sm me-2`}>\r\n                                                    <i className=\"fa-solid fa-eye\"/>\r\n                                                </a>\r\n                                            </Link>\r\n                                            <Link href={`/purchase/${el.id}`}>\r\n                                                <a className={`btn btn-warning btn-sm me-2`}>\r\n                                                    <i className=\"fa-solid fa-pen-to-square\"/>\r\n                                                </a>\r\n                                            </Link>\r\n                                            <a className={`btn btn-danger btn-sm`} onClick={(e) => {\r\n                                                e.preventDefault();\r\n                                                const result =\r\n                                                    confirm(\r\n                                                        'Want to delete?'\r\n                                                    );\r\n                                                if (result) {\r\n                                                    deleteHandler(\r\n                                                        el.id\r\n                                                    ).then();\r\n                                                }\r\n                                            }}>\r\n                                                <i className=\"fa-solid fa-trash-can\"/>\r\n                                            </a>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            ) || (\r\n                                <TableSkeleton tr={3} td={6}/>\r\n                            )}\r\n\r\n                            </tbody>\r\n                            <tfoot>\r\n                            <tr>\r\n                                <td colSpan={6}>\r\n                                    <nav className={`float-end`}>\r\n                                        <ul className=\"pagination mt-3\">\r\n                                            {\r\n                                                links.map(el => (\r\n                                                    <li className={`page-item ${el.active === true ? 'active' : ''}`}\r\n                                                        key={el.label}>\r\n                                                        <a className={`page-link`}\r\n                                                           onClick={() => paginate(el.url)}\r\n                                                           dangerouslySetInnerHTML={{__html: el.label}}/>\r\n                                                    </li>\r\n                                                ))\r\n                                            }\r\n                                        </ul>\r\n                                    </nav>\r\n                                </td>\r\n                            </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </Layout>\r\n        </>\r\n    )\r\n}\r\nexport const getServerSideProps = withIronSessionSsr(\r\n    async function getServerSideProps({req}) {\r\n        const session = req.session;\r\n        if (!session.user) {\r\n            return {\r\n                redirect: {\r\n                    destination: `/`,\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            props: {\r\n                user: session.user\r\n            },\r\n        };\r\n    },\r\n    session\r\n);","H:\\node\\pos\\pages\\purchase\\view\\[id].js",["222"],[],"import Layout from \"../../../components/layout/Layout\";\r\nimport Head from \"next/head\";\r\nimport {withIronSessionSsr} from 'iron-session/next';\r\nimport session from \"../../../lib/session\";\r\nimport {useState, useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport Skeleton, {SkeletonTheme} from \"react-loading-skeleton\";\r\nimport TableSkeleton from \"../../../components/TableSkeleton\";\r\n\r\nexport default function Details({user, id}) {\r\n    const [purchase, setPurchase] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n    const headers = {\r\n        headers: {Authorization: `Bearer ${user.token}`},\r\n    };\r\n    useEffect(() => {\r\n        axios.get(\r\n            `${process.env.API_URL}/purchase/${id}`,\r\n            headers\r\n        ).then(res => {\r\n            if (res.data.status === true) {\r\n                setPurchase(res.data.purchase);\r\n                setLoading(false);\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }, []);\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>\r\n                    Purchase Details\r\n                </title>\r\n            </Head>\r\n            <Layout user={user} title={`Purchase Details`}>\r\n                <div className=\"content\">\r\n                    <div className=\"custom-card text-light\">\r\n                        <p>\r\n                            <strong>Supplier Name</strong> : {\r\n                            purchase && loading === false && (\r\n                                purchase.purchaseData.supplier_name\r\n                            ) || (\r\n                                <SkeletonTheme baseColor=\"rgba(249, 58, 11, 0.1)\" highlightColor=\"#212130\">\r\n                                    <Skeleton width={`100%`} height={20}/>\r\n                                </SkeletonTheme>\r\n                            )\r\n                        }\r\n                        </p>\r\n                        <p>\r\n                            <strong>Purchase ID</strong> : {\r\n                            purchase && loading === false && (\r\n                                purchase.purchaseData.purchase_id\r\n                            ) || (\r\n                                <SkeletonTheme baseColor=\"rgba(249, 58, 11, 0.1)\" highlightColor=\"#212130\">\r\n                                    <Skeleton width={`100%`} height={20}/>\r\n                                </SkeletonTheme>\r\n                            )\r\n                        }\r\n                        </p>\r\n                        <p>\r\n                            <strong>Purchase Date</strong> : {\r\n                            purchase && loading === false && (\r\n                                purchase.purchaseData.date\r\n                            ) || (\r\n                                <SkeletonTheme baseColor=\"rgba(249, 58, 11, 0.1)\" highlightColor=\"#212130\">\r\n                                    <Skeleton width={`100%`} height={20}/>\r\n                                </SkeletonTheme>\r\n                            )\r\n                        }\r\n                        </p>\r\n                        <hr/>\r\n                        <table className={`table table-bordered table-hover`}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th width={`5%`}>\r\n                                    SL\r\n                                </th>\r\n                                <th width={`45%`}>\r\n                                    Product Name\r\n                                </th>\r\n                                <th width={`15%`}>\r\n                                    Purchase Price\r\n                                </th>\r\n                                <th width={`15%`}>\r\n                                    Quantity\r\n                                </th>\r\n                                <th className={`text-end`} width={`20%`}>\r\n                                    Subtotal\r\n                                </th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {\r\n                                purchase && purchase.purchaseItems && !loading && (\r\n                                    purchase.purchaseItems.map((el, index) => (\r\n                                        <tr key={`product-${el.id}`}>\r\n                                            <td>{index + 1}</td>\r\n                                            <td>\r\n                                                {el.name}\r\n                                            </td>\r\n                                            <td>{el.price} Tk.</td>\r\n                                            <td>{el.quantity}</td>\r\n                                            <td className={`text-end`}>{el.total} Tk.</td>\r\n                                        </tr>\r\n                                    ))\r\n                                ) || (\r\n                                    <TableSkeleton tr={5} td={5}/>\r\n                                )\r\n                            }\r\n                            </tbody>\r\n                            <tfoot>\r\n                                <tr>\r\n                                    <td colSpan={4} className={`text-end`}>Total</td>\r\n                                    <td className={`text-end`}>\r\n                                        {\r\n                                            purchase && loading === false && (\r\n                                                purchase.purchaseData.amount+ ' Tk.'\r\n                                            ) || (\r\n                                                <SkeletonTheme baseColor=\"rgba(249, 58, 11, 0.1)\" highlightColor=\"#212130\">\r\n                                                    <Skeleton width={`100%`} height={20}/>\r\n                                                </SkeletonTheme>\r\n                                            )\r\n                                        }\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td colSpan={4} className={`text-end`}>Paid</td>\r\n                                    <td className={`text-end`}>\r\n                                        {\r\n                                            purchase && loading === false && (\r\n                                                purchase.purchaseData.paid ? purchase.purchaseData.paid : 0 + ' Tk.'\r\n                                            ) || (\r\n                                                <SkeletonTheme baseColor=\"rgba(249, 58, 11, 0.1)\" highlightColor=\"#212130\">\r\n                                                    <Skeleton width={`100%`} height={20}/>\r\n                                                </SkeletonTheme>\r\n                                            )\r\n                                        }\r\n                                    </td>\r\n                                </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </Layout>\r\n        </>\r\n    )\r\n}\r\nexport const getServerSideProps = withIronSessionSsr(\r\n    async function getServerSideProps({req, params}) {\r\n        const session = req.session;\r\n        const id = params.id;\r\n        if (!session.user) {\r\n            return {\r\n                redirect: {\r\n                    destination: `/admin`,\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            props: {\r\n                user: session.user,\r\n                id,\r\n            },\r\n        };\r\n    },\r\n    session\r\n);","H:\\node\\pos\\pages\\purchase\\[id].js",["223"],[],"import Layout from \"../../components/layout/Layout\";\r\nimport Head from \"next/head\";\r\nimport {withIronSessionSsr} from 'iron-session/next';\r\nimport session from \"../../lib/session\";\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport axios from \"axios\";\r\nimport $ from 'jquery';\r\nimport {useEffect, useState} from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport Loader from \"../../components/Loader\";\r\nimport Skeleton, {SkeletonTheme} from \"react-loading-skeleton\";\r\nimport TableSkeleton from \"../../components/TableSkeleton\";\r\nimport AutocompleteDefaultSupplier from \"../../components/AutocompleteDefaultSupplier\";\r\n\r\nexport default function EditPurchase({user, id}) {\r\n    const [loader, setLoader] = useState(false);\r\n    const [total, setTotal] = useState(0);\r\n    const [due, setDue] = useState(0);\r\n    const [purchase, setPurchase] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n    const [products, setProducts] = useState();\r\n    const [timer, setTimer] = useState(null);\r\n    const [date, setDate] = useState(new Date());\r\n    const [purchaseProducts, setPurchaseProducts] = useState([]);\r\n    const headers = {\r\n        headers: {Authorization: `Bearer ${user.token}`},\r\n    };\r\n    useEffect(() => {\r\n        axios.get(\r\n            `${process.env.API_URL}/purchase/${id}`,\r\n            headers\r\n        ).then(res => {\r\n            if (res.data.status === true) {\r\n                setPurchase(res.data.purchase);\r\n                setTotal(res.data.purchase.purchaseData.amount);\r\n                setDate(new Date(res.data.purchase.purchaseData.date));\r\n                setDue(res.data.purchase.purchaseData.paid);\r\n                setPurchaseProducts(res.data.purchase.purchaseItems);\r\n                setLoading(false);\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }, [setPurchase, setTotal, setDate, setDue, setPurchaseProducts, setLoading]);\r\n    const handleForm = async (e) => {\r\n        e.preventDefault();\r\n        toast.loading('Submitting', {\r\n            position: \"bottom-right\",\r\n            theme: 'dark'\r\n        });\r\n        setLoader(true);\r\n        const productIds = $('.productId').map(function (index, el) {\r\n            return $(el).val();\r\n        }).get();\r\n        const productQuantities = $('.productQuantity').map(function (index, el) {\r\n            return $(el).val();\r\n        }).get();\r\n        const productPrices = $('.productPrice').map(function (index, el) {\r\n            return $(el).val();\r\n        }).get();\r\n        const comment = $('.note').val();\r\n        const date = $('.date').val();\r\n        const paid = $('.paid').val();\r\n        const supplier = $('.supplier-id').val();\r\n        if (supplier === '') {\r\n            setLoader(false);\r\n            toast.dismiss();\r\n            toast.error('Please select supplier', {\r\n                position: \"bottom-right\",\r\n                autoClose: false,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: 'dark',\r\n            });\r\n            return;\r\n        }\r\n        if (productIds.length <= 0) {\r\n            setLoader(false);\r\n            toast.dismiss();\r\n            toast.error('No product added', {\r\n                position: \"bottom-right\",\r\n                autoClose: false,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: 'dark',\r\n            });\r\n            return;\r\n        }\r\n        try {\r\n            const res = await axios.post(`${process.env.API_URL}/purchase/update`, {\r\n                purchase_id: id,\r\n                supplier_id: supplier,\r\n                productIds,\r\n                productQuantities,\r\n                productPrices,\r\n                date,\r\n                comment,\r\n                paid,\r\n                total\r\n            }, headers);\r\n            if (res.data.status === true) {\r\n                toast.dismiss();\r\n                toast.success('Successfully Saved', {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                setLoader(false);\r\n            } else {\r\n                toast.dismiss();\r\n                toast.success(res.data.error, {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                setLoader(false);\r\n            }\r\n        } catch (e) {\r\n            toast.dismiss();\r\n            toast.error(e.response.data, {\r\n                position: \"bottom-right\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: 'dark',\r\n            });\r\n            setLoader(false);\r\n        }\r\n    }\r\n\r\n    const removeProduct = (productId) => {\r\n        const newProducts = purchaseProducts.filter(product => {\r\n            return product.id !== productId;\r\n        });\r\n        setPurchaseProducts(newProducts);\r\n        setTotal(0);\r\n        newProducts.map(el => {\r\n            setTotal(oldTotal => oldTotal + parseFloat($(`.subtotal_${el.id}`).text()));\r\n        });\r\n    }\r\n    const calculateSubtotal = (productId) => {\r\n        const price = parseFloat($(`.productPrice_${productId}`).val());\r\n        const quantity = parseFloat($(`.productQuantity_${productId}`).val());\r\n        const subTotal = price * quantity;\r\n        $(`.subtotal_${productId}`).text(`${subTotal}`);\r\n        calculateSum();\r\n    }\r\n    const calculateSum = () => {\r\n        setTotal(0);\r\n        $(`.subtotal`).each(function () {\r\n            setTotal(oldTotal => oldTotal + parseFloat($(this).text()));\r\n        });\r\n    }\r\n    const calculateDue = () => {\r\n        const paid = $(`.paid`).val();\r\n        if (paid !== ''){\r\n            setDue(parseFloat(paid));\r\n        }else {\r\n            setDue(0);\r\n        }\r\n    }\r\n    const searchProduct = async () => {\r\n        $('.autocompleteItemContainer.product').show();\r\n        if (timer) {\r\n            clearTimeout(timer);\r\n            setTimer(null);\r\n        }\r\n        const name = $(`.search-product`).val();\r\n        setTimer(\r\n            setTimeout(() => {\r\n                axios.get(\r\n                    `${process.env.API_URL}/product?name=${name}`,\r\n                    headers\r\n                ).then(res => {\r\n                    if (res.data.status === true) {\r\n                        setProducts(res.data.products.data);\r\n                    }\r\n                }).catch(err => {\r\n                    console.log(err);\r\n                });\r\n            }, 500)\r\n        );\r\n    }\r\n    const addProduct = (data) => {\r\n        const alreadyAdded = purchaseProducts.filter(product => {\r\n            return product.id === data.id.toString();\r\n        });\r\n        console.log(alreadyAdded);\r\n        if (alreadyAdded.length > 0) {\r\n            alert('Product already added');\r\n        } else {\r\n            setPurchaseProducts(currentProduct => [...currentProduct, data]);\r\n            setTotal(oldTotal => parseFloat(oldTotal) + parseFloat(data.price));\r\n        }\r\n        $('.autocompleteItemContainer.product').hide();\r\n        $(`.search-product`).val('');\r\n    }\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>\r\n                    Edit Purchase\r\n                </title>\r\n            </Head>\r\n            {\r\n                loader && loader === true && (\r\n                    <Loader/>\r\n                )\r\n            }\r\n            <ToastContainer/>\r\n            <Layout user={user} title={`Edit Purchase`}>\r\n                <div className=\"content\">\r\n                    <div className=\"custom-card\">\r\n                        <form onSubmit={handleForm}>\r\n                            <div className=\"mb-3\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-6\">\r\n                                        <label htmlFor=\"supplier\" className={`form-label`}>Supplier</label>\r\n                                        {\r\n                                            purchase && loading === false && (\r\n                                                <AutocompleteDefaultSupplier name={purchase.purchaseData.supplier_name}\r\n                                                                             id={purchase.purchaseData.supplier_id}\r\n                                                                             token={user.token}/>\r\n                                            ) || (\r\n                                                <SkeletonTheme baseColor=\"rgba(249, 58, 11, 0.1)\" highlightColor=\"#212130\">\r\n                                                    <Skeleton width={`100%`} height={40}/>\r\n                                                </SkeletonTheme>\r\n                                            )\r\n                                        }\r\n                                    </div>\r\n                                    <div className=\"col-md-6\">\r\n                                        <label htmlFor=\"date\" className={`form-label`}>Date</label>\r\n                                        {\r\n                                            purchase && loading === false && (\r\n                                                <DatePicker\r\n                                                    selected={date}\r\n                                                    onChange={(date) => setDate(date)}\r\n                                                    dateFormat='yyyy-MM-dd'\r\n                                                    className={`form-control date`}\r\n                                                />\r\n                                            ) || (\r\n                                                <SkeletonTheme baseColor=\"rgba(249, 58, 11, 0.1)\" highlightColor=\"#212130\">\r\n                                                    <Skeleton width={`100%`} height={40}/>\r\n                                                </SkeletonTheme>\r\n                                            )\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mb-3\">\r\n                                <label htmlFor=\"product\" className={`form-label`}>Choose Product</label>\r\n                                <div className={`autocompleteWrapper product`}>\r\n                                    <input type=\"text\" className={`form-control autocompleteInput search-product`}\r\n                                           autoComplete={`off`} onKeyUp={searchProduct}\r\n                                           onKeyDown={searchProduct}\r\n                                           onChange={searchProduct} placeholder={`Search product`}/>\r\n                                    <div className={`autocompleteItemContainer product`}>\r\n                                        {\r\n                                            products && (\r\n                                                products.map(el => (\r\n                                                    <div className={`autocompleteItem`}\r\n                                                         key={`search-product-item-${el.id}`}\r\n                                                         onClick={() => addProduct(el)}>{el.name}</div>\r\n                                                ))\r\n                                            )\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <table className={`table table-bordered table-hover`}>\r\n                                <thead>\r\n                                <tr>\r\n                                    <th width={`5%`}>\r\n                                        SL\r\n                                    </th>\r\n                                    <th width={`40%`}>\r\n                                        Product Name\r\n                                    </th>\r\n                                    <th width={`15%`}>\r\n                                        Purchase Price\r\n                                    </th>\r\n                                    <th width={`15%`}>\r\n                                        Quantity\r\n                                    </th>\r\n                                    <th className={`text-end`} width={`20%`}>\r\n                                        Subtotal\r\n                                    </th>\r\n                                    <th className={`text-center`} width={`5%`}>\r\n                                        Action\r\n                                    </th>\r\n                                </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {\r\n                                    purchaseProducts && !loading && (\r\n                                        purchaseProducts.map((el, index) => (\r\n                                            <tr key={`purchase-product-item-${el.id}`}>\r\n                                                <td>\r\n                                                    {index + 1}\r\n                                                </td>\r\n                                                <td>\r\n                                                    {el.name}\r\n                                                    <input type=\"hidden\" className={`productId`} defaultValue={el.id}/>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <input type=\"text\"\r\n                                                           className={`form-control productPrice productPrice_${el.id}`}\r\n                                                           defaultValue={el.price}\r\n                                                           onChange={() => calculateSubtotal(el.id)}\r\n                                                           onKeyUp={() => calculateSubtotal(el.id)}\r\n                                                           onKeyDown={() => calculateSubtotal(el.id)}/>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <input type=\"text\"\r\n                                                           className={`form-control productQuantity productQuantity_${el.id}`}\r\n                                                           defaultValue={el.quantity ? el.quantity : 1}\r\n                                                           onChange={() => calculateSubtotal(el.id)}\r\n                                                           onKeyUp={() => calculateSubtotal(el.id)}\r\n                                                           onKeyDown={() => calculateSubtotal(el.id)}/>\r\n                                                </td>\r\n                                                <td className={`text-end`}>\r\n                                                    <span\r\n                                                        className={`subtotal subtotal_${el.id}`}>{el.total ? el.total : el.price}</span> Tk.\r\n                                                </td>\r\n                                                <td className={`text-center`}>\r\n                                                    <button\r\n                                                        className={`btn btn-danger btn-sm`}\r\n                                                        onClick={() => removeProduct(el.id)}>\r\n                                                        <i className=\"fa-solid fa-trash-can\"/>\r\n                                                    </button>\r\n                                                </td>\r\n                                            </tr>\r\n                                        ))\r\n                                    ) || (\r\n                                        <TableSkeleton tr={5} td={6}/>\r\n                                    )\r\n                                }\r\n                                </tbody>\r\n                                <tfoot>\r\n                                <tr>\r\n                                    <td className={`text-end`} colSpan={4}><strong>Total</strong></td>\r\n                                    <td className={`text-end border-1 border-white d-block`}>\r\n                                        {\r\n                                            purchase && loading === false && (\r\n                                                <span className={`total`}>{total} Tk.</span>\r\n                                            ) || (\r\n                                                <SkeletonTheme baseColor=\"rgba(249, 58, 11, 0.1)\" highlightColor=\"#212130\">\r\n                                                    <Skeleton width={`100%`} height={30}/>\r\n                                                </SkeletonTheme>\r\n                                            )\r\n                                        }\r\n                                    </td>\r\n                                    <td/>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className={`text-end`} colSpan={4}><strong>Paid</strong></td>\r\n                                    <td className={`px-0`}>\r\n                                        {\r\n                                            purchase && loading === false && (\r\n                                                <input type=\"text\" className={`form-control paid`} onKeyUp={calculateDue}\r\n                                                       onKeyDown={calculateDue} onChange={calculateDue}\r\n                                                       defaultValue={purchase.purchaseData.paid}/>\r\n                                            ) || (\r\n                                                <SkeletonTheme baseColor=\"rgba(249, 58, 11, 0.1)\" highlightColor=\"#212130\">\r\n                                                    <Skeleton width={`100%`} height={30}/>\r\n                                                </SkeletonTheme>\r\n                                            )\r\n                                        }\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className={`text-end`} colSpan={4}><strong>Due</strong></td>\r\n                                    <td className={`text-end border-1 border-white d-block`}>\r\n                                        {\r\n                                            purchase && loading === false && (\r\n                                                <span className={`due`}>{total - due} Tk.</span>\r\n                                            ) || (\r\n                                                <SkeletonTheme baseColor=\"rgba(249, 58, 11, 0.1)\" highlightColor=\"#212130\">\r\n                                                    <Skeleton width={`100%`} height={30}/>\r\n                                                </SkeletonTheme>\r\n                                            )\r\n                                        }\r\n                                    </td>\r\n                                </tr>\r\n                                </tfoot>\r\n                            </table>\r\n                            <div className=\"mb-3 mt-3\">\r\n                                <label htmlFor=\"note\" className={`form-label`}>Note</label>\r\n                                {\r\n                                    purchase && !loading && (\r\n                                        <textarea id=\"note\" rows=\"3\" className={`note form-control`}\r\n                                                  defaultValue={purchase.purchaseData.comment}/>\r\n                                    ) || (\r\n                                        <SkeletonTheme baseColor=\"rgba(249, 58, 11, 0.1)\" highlightColor=\"#212130\">\r\n                                            <Skeleton width={`100%`} height={80}/>\r\n                                        </SkeletonTheme>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <button className={`btn btn-success`} type={`submit`}>Update</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </Layout>\r\n        </>\r\n    )\r\n}\r\nexport const getServerSideProps = withIronSessionSsr(\r\n    async function getServerSideProps({req, params}) {\r\n        const session = req.session;\r\n        const id = params.id;\r\n        if (!session.user) {\r\n            return {\r\n                redirect: {\r\n                    destination: `/admin`,\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            props: {\r\n                user: session.user,\r\n                id,\r\n            },\r\n        };\r\n    },\r\n    session\r\n);","H:\\node\\pos\\pages\\sale\\create.js",[],[],"H:\\node\\pos\\pages\\sale\\index.js",["224"],[],"H:\\node\\pos\\pages\\sale\\view\\[id].js",["225"],[],"H:\\node\\pos\\pages\\sale\\[id].js",["226"],[],"H:\\node\\pos\\pages\\supplier\\create.js",[],[],"H:\\node\\pos\\pages\\supplier\\index.js",["227"],[],"import Layout from \"../../components/layout/Layout\";\r\nimport Head from \"next/head\";\r\nimport {withIronSessionSsr} from 'iron-session/next';\r\nimport session from \"../../lib/session\";\r\nimport Link from \"next/link\";\r\nimport {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport TableSkeleton from \"../../components/TableSkeleton\";\r\nimport $ from 'jquery';\r\nimport {ToastContainer, toast} from 'react-toastify';\r\n\r\nexport default function Supplier({user}) {\r\n    const headers = {\r\n        headers: {Authorization: `Bearer ${user.token}`},\r\n    };\r\n    const [suppliers, setSuppliers] = useState();\r\n    const [links, setLinks] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [timer, setTimer] = useState(null);\r\n\r\n    useEffect(() => {\r\n        axios.get(\r\n            `${process.env.API_URL}/supplier`,\r\n            headers\r\n        ).then(res => {\r\n            if (res.data.status === true) {\r\n                setSuppliers(res.data.suppliers.data);\r\n                setLinks(res.data.suppliers.links);\r\n                setLoading(false);\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }, []);\r\n    const searchSupplier = async () => {\r\n        if (timer) {\r\n            clearTimeout(timer);\r\n            setTimer(null);\r\n        }\r\n        setTimer(\r\n            setTimeout(() => {\r\n                setLoading(true);\r\n                const name = $('.terms').val();\r\n                axios.get(\r\n                    `${process.env.API_URL}/supplier?name=${name}`,\r\n                    headers\r\n                ).then(res => {\r\n                    if (res.data.status === true) {\r\n                        setSuppliers(res.data.suppliers.data);\r\n                        setLinks(res.data.suppliers.links);\r\n                        setLoading(false);\r\n                    }\r\n                }).catch(err => {\r\n                    console.log(err);\r\n                });\r\n            }, 2000)\r\n        );\r\n    }\r\n    const paginate = async (url) => {\r\n        setLoading(true);\r\n        try {\r\n            const res = await axios.get(\r\n                url,\r\n                headers\r\n            );\r\n            if (res.data.status === true) {\r\n                setSuppliers(res.data.suppliers.data);\r\n                setLinks(res.data.suppliers.links);\r\n                setLoading(false);\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n    const deleteHandler = async (id) => {\r\n        toast.loading('Deleting', {\r\n            position: \"bottom-right\",\r\n            theme: 'dark'\r\n        });\r\n        try {\r\n            const response = await axios.post(`${process.env.API_URL}/supplier/delete`, {\r\n                id: id,\r\n            }, headers);\r\n            if (response.data.status === true) {\r\n                toast.dismiss();\r\n                toast.success('Successfully Deleted', {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                $(`.row-id-${id}`).fadeOut();\r\n            }else {\r\n                toast.dismiss();\r\n                toast.error(response.data.error, {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n            }\r\n        } catch (err) {\r\n            toast.dismiss();\r\n            toast.error(err.response.data.errors, {\r\n                position: \"bottom-right\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: 'dark',\r\n            });\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>\r\n                    Suppliers\r\n                </title>\r\n            </Head>\r\n            <ToastContainer/>\r\n            <Layout user={user} title={`Suppliers`}>\r\n                <div className=\"content\">\r\n                    <div className=\"custom-card\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-9\">\r\n                                <Link href={`/supplier/create`}>\r\n                                    <a className={`btn btn-success`}>\r\n                                        <i className=\"fa-solid fa-plus\"/> Add New Supplier\r\n                                    </a>\r\n                                </Link>\r\n                            </div>\r\n                            <div className=\"col-md-3\">\r\n                                <form>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col\">\r\n                                            <input type=\"text\" className=\"form-control terms\"\r\n                                                   placeholder={`Search supplier`}\r\n                                                   name=\"email\" onKeyUp={searchSupplier} onKeyDown={searchSupplier}\r\n                                                   onChange={searchSupplier}/>\r\n                                        </div>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                        <table className={`table mt-4`}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th width={`5%`}>Sl</th>\r\n                                <th width={`30%`}>Name</th>\r\n                                <th width={`15%`}>Mobile</th>\r\n                                <th width={`20%`}>Address</th>\r\n                                <th width={`20%`}>Balance</th>\r\n                                <th width={`10%`}>Action</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {\r\n                                suppliers && suppliers.length <= 0 && (\r\n                                    <tr>\r\n                                        <td colSpan={6} className={`text-center`}>No Supplier Found</td>\r\n                                    </tr>\r\n                                )\r\n                            }\r\n                            {suppliers && !loading &&(\r\n                                suppliers.map((el, index) => (\r\n                                    <tr key={el.id} valign={`middle`} className={`row-id-${el.id}`}>\r\n                                        <td>{index + 1}</td>\r\n                                        <td>{el.name}</td>\r\n                                        <td>{el.mobile}</td>\r\n                                        <td>{el.address}</td>\r\n                                        <td>\r\n                                            {\r\n                                                el.balance ? el.balance : 0\r\n                                            } Tk.\r\n                                        </td>\r\n                                        <td>\r\n                                            <Link href={`/supplier/${el.id}`}>\r\n                                                <a className={`btn btn-warning btn-sm me-2`}>\r\n                                                    <i className=\"fa-solid fa-pen-to-square\"/>\r\n                                                </a>\r\n                                            </Link>\r\n                                            <a className={`btn btn-danger btn-sm`} onClick={(e) => {\r\n                                                e.preventDefault();\r\n                                                const result =\r\n                                                    confirm(\r\n                                                        'Want to delete?'\r\n                                                    );\r\n                                                if (result) {\r\n                                                    deleteHandler(\r\n                                                        el.id\r\n                                                    );\r\n                                                }\r\n                                            }}>\r\n                                                <i className=\"fa-solid fa-trash-can\"/>\r\n                                            </a>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            ) || (\r\n                                <TableSkeleton tr={3} td={6}/>\r\n                            )}\r\n                            </tbody>\r\n                            <tfoot>\r\n                            <tr>\r\n                                <td colSpan={6}>\r\n                                    <nav className={`float-end`}>\r\n                                        <ul className=\"pagination mt-3\">\r\n                                            {\r\n                                                links.map(el => (\r\n                                                    <li className={`page-item ${el.active === true ? 'active' : ''}`}\r\n                                                        key={el.label}>\r\n                                                        <a className={`page-link`}\r\n                                                           onClick={() => paginate(el.url)}\r\n                                                           dangerouslySetInnerHTML={{__html: el.label}}/>\r\n                                                    </li>\r\n                                                ))\r\n                                            }\r\n                                        </ul>\r\n                                    </nav>\r\n                                </td>\r\n                            </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </Layout>\r\n        </>\r\n    )\r\n}\r\nexport const getServerSideProps = withIronSessionSsr(\r\n    async function getServerSideProps({req}) {\r\n        const session = req.session;\r\n        if (!session.user) {\r\n            return {\r\n                redirect: {\r\n                    destination: `/`,\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            props: {\r\n                user: session.user\r\n            },\r\n        };\r\n    },\r\n    session\r\n);","H:\\node\\pos\\pages\\supplier\\[id].js",["228"],[],"import Layout from \"../../components/layout/Layout\";\r\nimport Head from \"next/head\";\r\nimport {withIronSessionSsr} from 'iron-session/next';\r\nimport session from \"../../lib/session\";\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport axios from \"axios\";\r\nimport $ from 'jquery';\r\nimport {useEffect, useState} from \"react\";\r\nimport Skeleton, {SkeletonTheme} from \"react-loading-skeleton\";\r\nimport Loader from \"../../components/Loader\";\r\n\r\nexport default function EditSupplier({user, id}) {\r\n    const [supplier, setSupplier] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n    const [loader, setLoader] = useState(false);\r\n    const headers = {\r\n        headers: {Authorization: `Bearer ${user.token}`},\r\n    };\r\n    useEffect(() => {\r\n        axios.get(\r\n            `${process.env.API_URL}/supplier/${id}`,\r\n            headers\r\n        ).then(res => {\r\n            if (res.data.status === true) {\r\n                setSupplier(res.data.supplier);\r\n                setLoading(false);\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }, []);\r\n    const handleForm = async (e) => {\r\n        e.preventDefault();\r\n        toast.loading('Submitting', {\r\n            position: \"bottom-right\",\r\n            theme: 'dark'\r\n        });\r\n        setLoader(true);\r\n        const name = $('.name').val();\r\n        const mobile = $('.mobile').val();\r\n        const address = $('.address').val();\r\n        if (name === '') {\r\n            toast.dismiss();\r\n            toast.error('Name is required', {\r\n                position: \"bottom-left\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: 'dark',\r\n            });\r\n            setLoader(false);\r\n            return;\r\n        }\r\n        try {\r\n            const res = await axios.post(`${process.env.API_URL}/supplier/update`, {\r\n                name, mobile, address, id\r\n            }, headers);\r\n            if (res.data.status === true) {\r\n                toast.dismiss();\r\n                toast.success('Successfully Updated', {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                setLoader(false);\r\n            } else {\r\n                toast.dismiss();\r\n                toast.error(e.response.data.errors, {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 3000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                setLoader(false);\r\n            }\r\n        } catch (e) {\r\n            toast.dismiss();\r\n            toast.error(e.response.data, {\r\n                position: \"bottom-right\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: 'dark',\r\n            });\r\n            setLoader(false);\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>\r\n                    Edit Supplier\r\n                </title>\r\n            </Head>\r\n            {\r\n                loader && loader === true && (\r\n                    <Loader/>\r\n                )\r\n            }\r\n            <ToastContainer/>\r\n            <Layout user={user} title={`Edit Supplier`}>\r\n                <div className=\"content\">\r\n                    <div className=\"custom-card\">\r\n                        <form onSubmit={handleForm}>\r\n                            <div className=\"mb-3\">\r\n                                <label htmlFor=\"name\" className={`form-label`}>Supplier Name</label>\r\n                                {\r\n                                    supplier && loading === false && (\r\n                                        <input type=\"text\" className={`form-control name`} id={`name`} required\r\n                                               defaultValue={supplier.name}/>\r\n                                    ) || (\r\n                                        <SkeletonTheme baseColor=\"rgba(249, 58, 11, 0.1)\" highlightColor=\"#212130\">\r\n                                            <Skeleton width={`100%`} height={40}/>\r\n                                        </SkeletonTheme>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <div className=\"mb-3\">\r\n                                <label htmlFor=\"mobile\" className={`form-label`}>Supplier Mobile</label>\r\n\r\n                                {\r\n                                    supplier && loading === false && (\r\n                                        <input type=\"text\" className={`form-control mobile`} id={`mobile`}\r\n                                               defaultValue={supplier.mobile}/>\r\n                                    ) || (\r\n                                        <SkeletonTheme baseColor=\"rgba(249, 58, 11, 0.1)\" highlightColor=\"#212130\">\r\n                                            <Skeleton width={`100%`} height={40}/>\r\n                                        </SkeletonTheme>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <div className=\"mb-3\">\r\n                                <label htmlFor=\"address\" className={`form-label`}>Supplier Address</label>\r\n\r\n                                {\r\n                                    supplier && loading === false && (\r\n                                        <input type=\"text\" className={`form-control address`} id={`address`}\r\n                                               defaultValue={supplier.address}/>\r\n                                    ) || (\r\n                                        <SkeletonTheme baseColor=\"rgba(249, 58, 11, 0.1)\" highlightColor=\"#212130\">\r\n                                            <Skeleton width={`100%`} height={40}/>\r\n                                        </SkeletonTheme>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <button className={`btn btn-success`} type={`submit`}>Update</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </Layout>\r\n        </>\r\n    )\r\n}\r\nexport const getServerSideProps = withIronSessionSsr(\r\n    async function getServerSideProps({req, params}) {\r\n        const session = req.session;\r\n        const id = params.id;\r\n        if (!session.user) {\r\n            return {\r\n                redirect: {\r\n                    destination: `/admin`,\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            props: {\r\n                user: session.user,\r\n                id,\r\n            },\r\n        };\r\n    },\r\n    session\r\n);","H:\\node\\pos\\pages\\unit\\create.js",[],[],"H:\\node\\pos\\pages\\unit\\index.js",["229"],[],"import Layout from \"../../components/layout/Layout\";\r\nimport Head from \"next/head\";\r\nimport {withIronSessionSsr} from 'iron-session/next';\r\nimport session from \"../../lib/session\";\r\nimport Link from \"next/link\";\r\nimport {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport TableSkeleton from \"../../components/TableSkeleton\";\r\nimport $ from 'jquery';\r\nimport {ToastContainer, toast} from 'react-toastify';\r\n\r\nexport default function Unit({user}) {\r\n    const headers = {\r\n        headers: {Authorization: `Bearer ${user.token}`},\r\n    };\r\n    const [units, setUnits] = useState();\r\n    const [links, setLinks] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [timer, setTimer] = useState(null);\r\n    useEffect(() => {\r\n        axios.get(\r\n            `${process.env.API_URL}/unit`,\r\n            headers\r\n        ).then(res => {\r\n            if (res.data.status === true) {\r\n                setUnits(res.data.units.data);\r\n                setLinks(res.data.units.links);\r\n                setLoading(false);\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }, []);\r\n\r\n    const searchUnits = async () => {\r\n        if (timer) {\r\n            clearTimeout(timer);\r\n            setTimer(null);\r\n        }\r\n        setTimer(\r\n            setTimeout(() => {\r\n                setLoading(true);\r\n                const name = $('.terms').val();\r\n                axios.get(\r\n                    `${process.env.API_URL}/unit?name=${name}`,\r\n                    headers\r\n                ).then(res => {\r\n                    if (res.data.status === true) {\r\n                        setUnits(res.data.units.data);\r\n                        setLinks(res.data.units.links);\r\n                        setLoading(false);\r\n                    }\r\n                }).catch(err => {\r\n                    console.log(err);\r\n                });\r\n            }, 2000)\r\n        );\r\n    }\r\n\r\n    const paginate = async (url) => {\r\n        setLoading(true);\r\n        try {\r\n            const res = await axios.get(\r\n                url,\r\n                headers\r\n            );\r\n            if (res.data.status === true) {\r\n                setUnits(res.data.units.data);\r\n                setLinks(res.data.units.links);\r\n                setLoading(false);\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n    const deleteHandler = async (id) => {\r\n        toast.loading('Deleting', {\r\n            position: \"bottom-right\",\r\n            theme: 'dark'\r\n        });\r\n        try {\r\n            const response = await axios.post(`${process.env.API_URL}/unit/delete`, {\r\n                id: id,\r\n            }, headers);\r\n            console.log(response.data);\r\n            if (response.data.status === true) {\r\n                toast.dismiss();\r\n                toast.success('Successfully Deleted', {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                $(`.row-id-${id}`).fadeOut();\r\n            } else {\r\n                toast.dismiss();\r\n                toast.error(response.data.error, {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n            }\r\n        } catch (err) {\r\n            toast.dismiss();\r\n            toast.error(err.response.data.errors, {\r\n                position: \"bottom-right\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: 'dark',\r\n            });\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>\r\n                    Units\r\n                </title>\r\n            </Head>\r\n            <ToastContainer/>\r\n            <Layout user={user} title={`Units`}>\r\n                <div className=\"content\">\r\n                    <div className=\"custom-card\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-9\">\r\n                                <Link href={`/unit/create`}>\r\n                                    <a className={`btn btn-success`}>\r\n                                        <i className=\"fa-solid fa-plus\"/> Add New Unit\r\n                                    </a>\r\n                                </Link>\r\n                            </div>\r\n                            <div className=\"col-md-3\">\r\n                                <form>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col\">\r\n                                            <input type=\"text\" className=\"form-control terms\"\r\n                                                   placeholder={`Search unit`}\r\n                                                   name=\"email\" onKeyUp={searchUnits} onKeyDown={searchUnits}\r\n                                                   onChange={searchUnits}/>\r\n                                        </div>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                        <table className={`table mt-4`}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th width={`10%`}>Sl</th>\r\n                                <th width={`80%`}>Name</th>\r\n                                <th width={`10%`}>Action</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {\r\n                                units && units.length <= 0 && (\r\n                                    <tr>\r\n                                        <td colSpan={3} className={`text-center`}>No Unit Found</td>\r\n                                    </tr>\r\n                                )\r\n                            }\r\n                            {units && !loading && (\r\n                                units.map((el, index) => (\r\n                                    <tr key={el.id} valign={`middle`} className={`row-id-${el.id}`}>\r\n                                        <td>{index + 1}</td>\r\n                                        <td>{el.name}</td>\r\n                                        <td>\r\n                                            <Link href={`/unit/${el.id}`}>\r\n                                                <a className={`btn btn-warning btn-sm me-2`}>\r\n                                                    <i className=\"fa-solid fa-pen-to-square\"/>\r\n                                                </a>\r\n                                            </Link>\r\n                                            <a className={`btn btn-danger btn-sm`} onClick={(e) => {\r\n                                                e.preventDefault();\r\n                                                const result =\r\n                                                    confirm(\r\n                                                        'Want to delete?'\r\n                                                    );\r\n                                                if (result) {\r\n                                                    deleteHandler(\r\n                                                        el.id\r\n                                                    );\r\n                                                }\r\n                                            }}>\r\n                                                <i className=\"fa-solid fa-trash-can\"/>\r\n                                            </a>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            ) || (\r\n                                <TableSkeleton tr={3} td={3}/>\r\n                            )}\r\n\r\n                            </tbody>\r\n                            <tfoot>\r\n                            <tr>\r\n                                <td colSpan={3}>\r\n                                    <nav className={`float-end`}>\r\n                                        <ul className=\"pagination mt-3\">\r\n                                            {\r\n                                                links.map(el => (\r\n                                                    <li className={`page-item ${el.active === true ? 'active' : ''}`}\r\n                                                        key={el.label}>\r\n                                                        <a className={`page-link`}\r\n                                                           onClick={() => paginate(el.url)}\r\n                                                           dangerouslySetInnerHTML={{__html: el.label}}/>\r\n                                                    </li>\r\n                                                ))\r\n                                            }\r\n                                        </ul>\r\n                                    </nav>\r\n                                </td>\r\n                            </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </Layout>\r\n        </>\r\n    )\r\n}\r\nexport const getServerSideProps = withIronSessionSsr(\r\n    async function getServerSideProps({req}) {\r\n        const session = req.session;\r\n        if (!session.user) {\r\n            return {\r\n                redirect: {\r\n                    destination: `/`,\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            props: {\r\n                user: session.user\r\n            },\r\n        };\r\n    },\r\n    session\r\n);","H:\\node\\pos\\pages\\unit\\[id].js",["230"],[],"import Layout from \"../../components/layout/Layout\";\r\nimport Head from \"next/head\";\r\nimport {withIronSessionSsr} from 'iron-session/next';\r\nimport session from \"../../lib/session\";\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport axios from \"axios\";\r\nimport $ from 'jquery';\r\nimport {useEffect, useState} from \"react\";\r\nimport Skeleton, {SkeletonTheme} from \"react-loading-skeleton\";\r\nimport Loader from \"../../components/Loader\";\r\n\r\nexport default function EditUnit({user, id}) {\r\n    const [loader, setLoader] = useState(false);\r\n    const [unit, setUnit] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n    const headers = {\r\n        headers: {Authorization: `Bearer ${user.token}`},\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get(\r\n            `${process.env.API_URL}/unit/${id}`,\r\n            headers\r\n        ).then(res => {\r\n            if (res.data.status === true) {\r\n                setUnit(res.data.unit);\r\n                setLoading(false);\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }, []);\r\n\r\n    const handleForm = async (e) => {\r\n        e.preventDefault();\r\n        toast.loading('Submitting', {\r\n            position: \"bottom-right\",\r\n            theme: 'dark'\r\n        });\r\n        setLoader(true);\r\n        const name = $('.name').val();\r\n        if (name === '') {\r\n            toast.dismiss();\r\n            toast.error('Name is required', {\r\n                position: \"bottom-left\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: 'dark',\r\n            });\r\n            setLoader(false);\r\n            return;\r\n        }\r\n        try {\r\n            const res = await axios.post(`${process.env.API_URL}/unit/update`, {\r\n                name, id\r\n            }, headers);\r\n            if (res.data.status === true) {\r\n                toast.dismiss();\r\n                toast.success('Successfully Updated', {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                setLoader(false);\r\n            } else {\r\n                toast.dismiss();\r\n                toast.error(res.data.errors, {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                setLoader(false);\r\n            }\r\n        } catch (e) {\r\n            toast.dismiss();\r\n            toast.error(e.response.data.errors, {\r\n                position: \"bottom-right\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: 'dark',\r\n            });\r\n            setLoader(false);\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>\r\n                    Edit Unit\r\n                </title>\r\n            </Head>\r\n            {\r\n                loader && loader === true && (\r\n                    <Loader/>\r\n                )\r\n            }\r\n            <ToastContainer/>\r\n            <Layout user={user} title={`Edit Unit`}>\r\n                <div className=\"content\">\r\n                    <div className=\"custom-card\">\r\n                        <form onSubmit={handleForm}>\r\n                            <div className=\"mb-3\">\r\n                                <label htmlFor=\"name\" className={`form-label`}>Unit Name</label>\r\n                                {\r\n                                    unit && loading === false && (\r\n                                        <input type=\"text\" className={`form-control name`} id={`name`} required\r\n                                               defaultValue={unit.name}/>\r\n                                    ) || (\r\n                                        <SkeletonTheme baseColor=\"rgba(249, 58, 11, 0.1)\" highlightColor=\"#212130\">\r\n                                            <Skeleton width={`100%`} height={40}/>\r\n                                        </SkeletonTheme>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <button className={`btn btn-success`} type={`submit`}>Update</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </Layout>\r\n        </>\r\n    )\r\n}\r\nexport const getServerSideProps = withIronSessionSsr(\r\n    async function getServerSideProps({req, params}) {\r\n        const session = req.session;\r\n        const id = params.id;\r\n        if (!session.user) {\r\n            return {\r\n                redirect: {\r\n                    destination: `/`,\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            props: {\r\n                user: session.user,\r\n                id,\r\n            },\r\n        };\r\n    },\r\n    session\r\n);","H:\\node\\pos\\pages\\_app.js",[],[],"H:\\node\\pos\\components\\AutocompleteDefaultSupplier.js",[],[],"H:\\node\\pos\\components\\AutocompleteInput.js",[],[],"H:\\node\\pos\\components\\CustomImage.js",[],[],"H:\\node\\pos\\components\\layout\\Layout.js",[],[],"H:\\node\\pos\\components\\layout\\PosSidebar.js",[],[],"H:\\node\\pos\\components\\layout\\PosTopBar.js",[],[],"H:\\node\\pos\\components\\layout\\Sidebar.js",[],[],"H:\\node\\pos\\components\\layout\\TopBar.js",[],[],"H:\\node\\pos\\components\\Loader.js",[],[],"H:\\node\\pos\\components\\TableSkeleton.js",[],[],"H:\\node\\pos\\lib\\db.js",[],[],"H:\\node\\pos\\lib\\session.js",[],[],{"ruleId":"231","severity":1,"message":"232","line":33,"column":8,"nodeType":"233","endLine":33,"endColumn":10,"suggestions":"234"},{"ruleId":"231","severity":1,"message":"235","line":32,"column":8,"nodeType":"233","endLine":32,"endColumn":10,"suggestions":"236"},{"ruleId":"231","severity":1,"message":"232","line":33,"column":8,"nodeType":"233","endLine":33,"endColumn":10,"suggestions":"237"},{"ruleId":"231","severity":1,"message":"235","line":32,"column":8,"nodeType":"233","endLine":32,"endColumn":10,"suggestions":"238"},{"ruleId":"231","severity":1,"message":"232","line":43,"column":8,"nodeType":"233","endLine":43,"endColumn":33,"suggestions":"239"},{"ruleId":"231","severity":1,"message":"232","line":32,"column":8,"nodeType":"233","endLine":32,"endColumn":10,"suggestions":"240"},{"ruleId":"231","severity":1,"message":"232","line":46,"column":8,"nodeType":"233","endLine":46,"endColumn":33,"suggestions":"241"},{"ruleId":"231","severity":1,"message":"235","line":59,"column":8,"nodeType":"233","endLine":59,"endColumn":10,"suggestions":"242"},{"ruleId":"231","severity":1,"message":"232","line":34,"column":8,"nodeType":"233","endLine":34,"endColumn":10,"suggestions":"243"},{"ruleId":"231","severity":1,"message":"235","line":28,"column":8,"nodeType":"233","endLine":28,"endColumn":10,"suggestions":"244"},{"ruleId":"231","severity":1,"message":"235","line":44,"column":8,"nodeType":"233","endLine":44,"endColumn":81,"suggestions":"245"},{"ruleId":"231","severity":1,"message":"232","line":34,"column":8,"nodeType":"233","endLine":34,"endColumn":10,"suggestions":"246"},{"ruleId":"231","severity":1,"message":"235","line":28,"column":8,"nodeType":"233","endLine":28,"endColumn":10,"suggestions":"247"},{"ruleId":"231","severity":1,"message":"235","line":44,"column":8,"nodeType":"233","endLine":44,"endColumn":81,"suggestions":"248"},{"ruleId":"231","severity":1,"message":"232","line":34,"column":8,"nodeType":"233","endLine":34,"endColumn":10,"suggestions":"249"},{"ruleId":"231","severity":1,"message":"235","line":31,"column":8,"nodeType":"233","endLine":31,"endColumn":10,"suggestions":"250"},{"ruleId":"231","severity":1,"message":"232","line":33,"column":8,"nodeType":"233","endLine":33,"endColumn":10,"suggestions":"251"},{"ruleId":"231","severity":1,"message":"235","line":32,"column":8,"nodeType":"233","endLine":32,"endColumn":10,"suggestions":"252"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'headers'. Either include it or remove the dependency array.","ArrayExpression",["253"],"React Hook useEffect has missing dependencies: 'headers' and 'id'. Either include them or remove the dependency array.",["254"],["255"],["256"],["257"],["258"],["259"],["260"],["261"],["262"],["263"],["264"],["265"],["266"],["267"],["268"],["269"],["270"],{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"271","fix":"275"},{"desc":"273","fix":"276"},{"desc":"277","fix":"278"},{"desc":"271","fix":"279"},{"desc":"277","fix":"280"},{"desc":"273","fix":"281"},{"desc":"271","fix":"282"},{"desc":"273","fix":"283"},{"desc":"284","fix":"285"},{"desc":"271","fix":"286"},{"desc":"273","fix":"287"},{"desc":"284","fix":"288"},{"desc":"271","fix":"289"},{"desc":"273","fix":"290"},{"desc":"271","fix":"291"},{"desc":"273","fix":"292"},"Update the dependencies array to be: [headers]",{"range":"293","text":"294"},"Update the dependencies array to be: [headers, id]",{"range":"295","text":"296"},{"range":"297","text":"294"},{"range":"298","text":"296"},"Update the dependencies array to be: [headers, setCategories, setUnits]",{"range":"299","text":"300"},{"range":"301","text":"294"},{"range":"302","text":"300"},{"range":"303","text":"296"},{"range":"304","text":"294"},{"range":"305","text":"296"},"Update the dependencies array to be: [setPurchase, setTotal, setDate, setDue, setPurchaseProducts, setLoading, id, headers]",{"range":"306","text":"307"},{"range":"308","text":"294"},{"range":"309","text":"296"},{"range":"310","text":"307"},{"range":"311","text":"294"},{"range":"312","text":"296"},{"range":"313","text":"294"},{"range":"314","text":"296"},[1181,1183],"[headers]",[1142,1144],"[headers, id]",[1176,1178],[1142,1144],[1485,1510],"[headers, setCategories, setUnits]",[1167,1169],[1650,1675],[2042,2044],[1178,1180],[994,996],[1870,1943],"[setPurchase, setTotal, setDate, setDue, setPurchaseProducts, setLoading, id, headers]",[1178,1180],[994,996],[1870,1943],[1178,1180],[1106,1108],[1148,1150],[1084,1086]]